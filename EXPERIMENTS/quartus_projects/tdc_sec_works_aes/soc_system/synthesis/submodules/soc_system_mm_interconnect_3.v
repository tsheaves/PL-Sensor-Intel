// soc_system_mm_interconnect_3.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 22.1 917

`timescale 1 ps / 1 ps
module soc_system_mm_interconnect_3 (
		output wire [3:0]  pulsegenerator_altera_axi4lite_slave_awaddr,             //              pulsegenerator_altera_axi4lite_slave.awaddr
		output wire [2:0]  pulsegenerator_altera_axi4lite_slave_awprot,             //                                                  .awprot
		output wire        pulsegenerator_altera_axi4lite_slave_awvalid,            //                                                  .awvalid
		input  wire        pulsegenerator_altera_axi4lite_slave_awready,            //                                                  .awready
		output wire [31:0] pulsegenerator_altera_axi4lite_slave_wdata,              //                                                  .wdata
		output wire [3:0]  pulsegenerator_altera_axi4lite_slave_wstrb,              //                                                  .wstrb
		output wire        pulsegenerator_altera_axi4lite_slave_wvalid,             //                                                  .wvalid
		input  wire        pulsegenerator_altera_axi4lite_slave_wready,             //                                                  .wready
		input  wire [1:0]  pulsegenerator_altera_axi4lite_slave_bresp,              //                                                  .bresp
		input  wire        pulsegenerator_altera_axi4lite_slave_bvalid,             //                                                  .bvalid
		output wire        pulsegenerator_altera_axi4lite_slave_bready,             //                                                  .bready
		output wire [3:0]  pulsegenerator_altera_axi4lite_slave_araddr,             //                                                  .araddr
		output wire [2:0]  pulsegenerator_altera_axi4lite_slave_arprot,             //                                                  .arprot
		output wire        pulsegenerator_altera_axi4lite_slave_arvalid,            //                                                  .arvalid
		input  wire        pulsegenerator_altera_axi4lite_slave_arready,            //                                                  .arready
		input  wire [31:0] pulsegenerator_altera_axi4lite_slave_rdata,              //                                                  .rdata
		input  wire [1:0]  pulsegenerator_altera_axi4lite_slave_rresp,              //                                                  .rresp
		input  wire        pulsegenerator_altera_axi4lite_slave_rvalid,             //                                                  .rvalid
		output wire        pulsegenerator_altera_axi4lite_slave_rready,             //                                                  .rready
		input  wire        theta_clks_outclk0_clk,                                  //                                theta_clks_outclk0.clk
		input  wire        pulsegenerator_cdc_m0_reset_reset_bridge_in_reset_reset, // pulsegenerator_cdc_m0_reset_reset_bridge_in_reset.reset
		input  wire [3:0]  pulsegenerator_cdc_m0_address,                           //                             pulsegenerator_cdc_m0.address
		output wire        pulsegenerator_cdc_m0_waitrequest,                       //                                                  .waitrequest
		input  wire [0:0]  pulsegenerator_cdc_m0_burstcount,                        //                                                  .burstcount
		input  wire [3:0]  pulsegenerator_cdc_m0_byteenable,                        //                                                  .byteenable
		input  wire        pulsegenerator_cdc_m0_read,                              //                                                  .read
		output wire [31:0] pulsegenerator_cdc_m0_readdata,                          //                                                  .readdata
		output wire        pulsegenerator_cdc_m0_readdatavalid,                     //                                                  .readdatavalid
		input  wire        pulsegenerator_cdc_m0_write,                             //                                                  .write
		input  wire [31:0] pulsegenerator_cdc_m0_writedata,                         //                                                  .writedata
		input  wire        pulsegenerator_cdc_m0_debugaccess                        //                                                  .debugaccess
	);

	wire         pulsegenerator_cdc_m0_translator_avalon_universal_master_0_waitrequest;   // pulsegenerator_cdc_m0_agent:av_waitrequest -> pulsegenerator_cdc_m0_translator:uav_waitrequest
	wire  [31:0] pulsegenerator_cdc_m0_translator_avalon_universal_master_0_readdata;      // pulsegenerator_cdc_m0_agent:av_readdata -> pulsegenerator_cdc_m0_translator:uav_readdata
	wire         pulsegenerator_cdc_m0_translator_avalon_universal_master_0_debugaccess;   // pulsegenerator_cdc_m0_translator:uav_debugaccess -> pulsegenerator_cdc_m0_agent:av_debugaccess
	wire   [3:0] pulsegenerator_cdc_m0_translator_avalon_universal_master_0_address;       // pulsegenerator_cdc_m0_translator:uav_address -> pulsegenerator_cdc_m0_agent:av_address
	wire         pulsegenerator_cdc_m0_translator_avalon_universal_master_0_read;          // pulsegenerator_cdc_m0_translator:uav_read -> pulsegenerator_cdc_m0_agent:av_read
	wire   [3:0] pulsegenerator_cdc_m0_translator_avalon_universal_master_0_byteenable;    // pulsegenerator_cdc_m0_translator:uav_byteenable -> pulsegenerator_cdc_m0_agent:av_byteenable
	wire         pulsegenerator_cdc_m0_translator_avalon_universal_master_0_readdatavalid; // pulsegenerator_cdc_m0_agent:av_readdatavalid -> pulsegenerator_cdc_m0_translator:uav_readdatavalid
	wire         pulsegenerator_cdc_m0_translator_avalon_universal_master_0_lock;          // pulsegenerator_cdc_m0_translator:uav_lock -> pulsegenerator_cdc_m0_agent:av_lock
	wire         pulsegenerator_cdc_m0_translator_avalon_universal_master_0_write;         // pulsegenerator_cdc_m0_translator:uav_write -> pulsegenerator_cdc_m0_agent:av_write
	wire  [31:0] pulsegenerator_cdc_m0_translator_avalon_universal_master_0_writedata;     // pulsegenerator_cdc_m0_translator:uav_writedata -> pulsegenerator_cdc_m0_agent:av_writedata
	wire   [2:0] pulsegenerator_cdc_m0_translator_avalon_universal_master_0_burstcount;    // pulsegenerator_cdc_m0_translator:uav_burstcount -> pulsegenerator_cdc_m0_agent:av_burstcount
	wire         cmd_mux_src_valid;                                                        // cmd_mux:src_valid -> pulsegenerator_altera_axi4lite_slave_agent:write_cp_valid
	wire  [73:0] cmd_mux_src_data;                                                         // cmd_mux:src_data -> pulsegenerator_altera_axi4lite_slave_agent:write_cp_data
	wire         cmd_mux_src_ready;                                                        // pulsegenerator_altera_axi4lite_slave_agent:write_cp_ready -> cmd_mux:src_ready
	wire   [1:0] cmd_mux_src_channel;                                                      // cmd_mux:src_channel -> pulsegenerator_altera_axi4lite_slave_agent:write_cp_channel
	wire         cmd_mux_src_startofpacket;                                                // cmd_mux:src_startofpacket -> pulsegenerator_altera_axi4lite_slave_agent:write_cp_startofpacket
	wire         cmd_mux_src_endofpacket;                                                  // cmd_mux:src_endofpacket -> pulsegenerator_altera_axi4lite_slave_agent:write_cp_endofpacket
	wire         cmd_mux_001_src_valid;                                                    // cmd_mux_001:src_valid -> pulsegenerator_altera_axi4lite_slave_agent:read_cp_valid
	wire  [73:0] cmd_mux_001_src_data;                                                     // cmd_mux_001:src_data -> pulsegenerator_altera_axi4lite_slave_agent:read_cp_data
	wire         cmd_mux_001_src_ready;                                                    // pulsegenerator_altera_axi4lite_slave_agent:read_cp_ready -> cmd_mux_001:src_ready
	wire   [1:0] cmd_mux_001_src_channel;                                                  // cmd_mux_001:src_channel -> pulsegenerator_altera_axi4lite_slave_agent:read_cp_channel
	wire         cmd_mux_001_src_startofpacket;                                            // cmd_mux_001:src_startofpacket -> pulsegenerator_altera_axi4lite_slave_agent:read_cp_startofpacket
	wire         cmd_mux_001_src_endofpacket;                                              // cmd_mux_001:src_endofpacket -> pulsegenerator_altera_axi4lite_slave_agent:read_cp_endofpacket
	wire         pulsegenerator_cdc_m0_agent_cp_valid;                                     // pulsegenerator_cdc_m0_agent:cp_valid -> router:sink_valid
	wire  [73:0] pulsegenerator_cdc_m0_agent_cp_data;                                      // pulsegenerator_cdc_m0_agent:cp_data -> router:sink_data
	wire         pulsegenerator_cdc_m0_agent_cp_ready;                                     // router:sink_ready -> pulsegenerator_cdc_m0_agent:cp_ready
	wire         pulsegenerator_cdc_m0_agent_cp_startofpacket;                             // pulsegenerator_cdc_m0_agent:cp_startofpacket -> router:sink_startofpacket
	wire         pulsegenerator_cdc_m0_agent_cp_endofpacket;                               // pulsegenerator_cdc_m0_agent:cp_endofpacket -> router:sink_endofpacket
	wire         pulsegenerator_altera_axi4lite_slave_agent_write_rp_valid;                // pulsegenerator_altera_axi4lite_slave_agent:write_rp_valid -> router_001:sink_valid
	wire  [73:0] pulsegenerator_altera_axi4lite_slave_agent_write_rp_data;                 // pulsegenerator_altera_axi4lite_slave_agent:write_rp_data -> router_001:sink_data
	wire         pulsegenerator_altera_axi4lite_slave_agent_write_rp_ready;                // router_001:sink_ready -> pulsegenerator_altera_axi4lite_slave_agent:write_rp_ready
	wire         pulsegenerator_altera_axi4lite_slave_agent_write_rp_startofpacket;        // pulsegenerator_altera_axi4lite_slave_agent:write_rp_startofpacket -> router_001:sink_startofpacket
	wire         pulsegenerator_altera_axi4lite_slave_agent_write_rp_endofpacket;          // pulsegenerator_altera_axi4lite_slave_agent:write_rp_endofpacket -> router_001:sink_endofpacket
	wire         router_001_src_valid;                                                     // router_001:src_valid -> rsp_demux:sink_valid
	wire  [73:0] router_001_src_data;                                                      // router_001:src_data -> rsp_demux:sink_data
	wire         router_001_src_ready;                                                     // rsp_demux:sink_ready -> router_001:src_ready
	wire   [1:0] router_001_src_channel;                                                   // router_001:src_channel -> rsp_demux:sink_channel
	wire         router_001_src_startofpacket;                                             // router_001:src_startofpacket -> rsp_demux:sink_startofpacket
	wire         router_001_src_endofpacket;                                               // router_001:src_endofpacket -> rsp_demux:sink_endofpacket
	wire         pulsegenerator_altera_axi4lite_slave_agent_read_rp_valid;                 // pulsegenerator_altera_axi4lite_slave_agent:read_rp_valid -> router_002:sink_valid
	wire  [73:0] pulsegenerator_altera_axi4lite_slave_agent_read_rp_data;                  // pulsegenerator_altera_axi4lite_slave_agent:read_rp_data -> router_002:sink_data
	wire         pulsegenerator_altera_axi4lite_slave_agent_read_rp_ready;                 // router_002:sink_ready -> pulsegenerator_altera_axi4lite_slave_agent:read_rp_ready
	wire         pulsegenerator_altera_axi4lite_slave_agent_read_rp_startofpacket;         // pulsegenerator_altera_axi4lite_slave_agent:read_rp_startofpacket -> router_002:sink_startofpacket
	wire         pulsegenerator_altera_axi4lite_slave_agent_read_rp_endofpacket;           // pulsegenerator_altera_axi4lite_slave_agent:read_rp_endofpacket -> router_002:sink_endofpacket
	wire         router_002_src_valid;                                                     // router_002:src_valid -> rsp_demux_001:sink_valid
	wire  [73:0] router_002_src_data;                                                      // router_002:src_data -> rsp_demux_001:sink_data
	wire         router_002_src_ready;                                                     // rsp_demux_001:sink_ready -> router_002:src_ready
	wire   [1:0] router_002_src_channel;                                                   // router_002:src_channel -> rsp_demux_001:sink_channel
	wire         router_002_src_startofpacket;                                             // router_002:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire         router_002_src_endofpacket;                                               // router_002:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire         router_src_valid;                                                         // router:src_valid -> pulsegenerator_cdc_m0_limiter:cmd_sink_valid
	wire  [73:0] router_src_data;                                                          // router:src_data -> pulsegenerator_cdc_m0_limiter:cmd_sink_data
	wire         router_src_ready;                                                         // pulsegenerator_cdc_m0_limiter:cmd_sink_ready -> router:src_ready
	wire   [1:0] router_src_channel;                                                       // router:src_channel -> pulsegenerator_cdc_m0_limiter:cmd_sink_channel
	wire         router_src_startofpacket;                                                 // router:src_startofpacket -> pulsegenerator_cdc_m0_limiter:cmd_sink_startofpacket
	wire         router_src_endofpacket;                                                   // router:src_endofpacket -> pulsegenerator_cdc_m0_limiter:cmd_sink_endofpacket
	wire  [73:0] pulsegenerator_cdc_m0_limiter_cmd_src_data;                               // pulsegenerator_cdc_m0_limiter:cmd_src_data -> cmd_demux:sink_data
	wire         pulsegenerator_cdc_m0_limiter_cmd_src_ready;                              // cmd_demux:sink_ready -> pulsegenerator_cdc_m0_limiter:cmd_src_ready
	wire   [1:0] pulsegenerator_cdc_m0_limiter_cmd_src_channel;                            // pulsegenerator_cdc_m0_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire         pulsegenerator_cdc_m0_limiter_cmd_src_startofpacket;                      // pulsegenerator_cdc_m0_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire         pulsegenerator_cdc_m0_limiter_cmd_src_endofpacket;                        // pulsegenerator_cdc_m0_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire         rsp_mux_src_valid;                                                        // rsp_mux:src_valid -> pulsegenerator_cdc_m0_limiter:rsp_sink_valid
	wire  [73:0] rsp_mux_src_data;                                                         // rsp_mux:src_data -> pulsegenerator_cdc_m0_limiter:rsp_sink_data
	wire         rsp_mux_src_ready;                                                        // pulsegenerator_cdc_m0_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire   [1:0] rsp_mux_src_channel;                                                      // rsp_mux:src_channel -> pulsegenerator_cdc_m0_limiter:rsp_sink_channel
	wire         rsp_mux_src_startofpacket;                                                // rsp_mux:src_startofpacket -> pulsegenerator_cdc_m0_limiter:rsp_sink_startofpacket
	wire         rsp_mux_src_endofpacket;                                                  // rsp_mux:src_endofpacket -> pulsegenerator_cdc_m0_limiter:rsp_sink_endofpacket
	wire         pulsegenerator_cdc_m0_limiter_rsp_src_valid;                              // pulsegenerator_cdc_m0_limiter:rsp_src_valid -> pulsegenerator_cdc_m0_agent:rp_valid
	wire  [73:0] pulsegenerator_cdc_m0_limiter_rsp_src_data;                               // pulsegenerator_cdc_m0_limiter:rsp_src_data -> pulsegenerator_cdc_m0_agent:rp_data
	wire         pulsegenerator_cdc_m0_limiter_rsp_src_ready;                              // pulsegenerator_cdc_m0_agent:rp_ready -> pulsegenerator_cdc_m0_limiter:rsp_src_ready
	wire   [1:0] pulsegenerator_cdc_m0_limiter_rsp_src_channel;                            // pulsegenerator_cdc_m0_limiter:rsp_src_channel -> pulsegenerator_cdc_m0_agent:rp_channel
	wire         pulsegenerator_cdc_m0_limiter_rsp_src_startofpacket;                      // pulsegenerator_cdc_m0_limiter:rsp_src_startofpacket -> pulsegenerator_cdc_m0_agent:rp_startofpacket
	wire         pulsegenerator_cdc_m0_limiter_rsp_src_endofpacket;                        // pulsegenerator_cdc_m0_limiter:rsp_src_endofpacket -> pulsegenerator_cdc_m0_agent:rp_endofpacket
	wire         cmd_demux_src0_valid;                                                     // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [73:0] cmd_demux_src0_data;                                                      // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire         cmd_demux_src0_ready;                                                     // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [1:0] cmd_demux_src0_channel;                                                   // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire         cmd_demux_src0_startofpacket;                                             // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire         cmd_demux_src0_endofpacket;                                               // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire         cmd_demux_src1_valid;                                                     // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [73:0] cmd_demux_src1_data;                                                      // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire         cmd_demux_src1_ready;                                                     // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire   [1:0] cmd_demux_src1_channel;                                                   // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire         cmd_demux_src1_startofpacket;                                             // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire         cmd_demux_src1_endofpacket;                                               // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire         rsp_demux_src0_valid;                                                     // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [73:0] rsp_demux_src0_data;                                                      // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire         rsp_demux_src0_ready;                                                     // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [1:0] rsp_demux_src0_channel;                                                   // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire         rsp_demux_src0_startofpacket;                                             // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire         rsp_demux_src0_endofpacket;                                               // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire         rsp_demux_001_src0_valid;                                                 // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [73:0] rsp_demux_001_src0_data;                                                  // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire         rsp_demux_001_src0_ready;                                                 // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire   [1:0] rsp_demux_001_src0_channel;                                               // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire         rsp_demux_001_src0_startofpacket;                                         // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire         rsp_demux_001_src0_endofpacket;                                           // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire   [1:0] pulsegenerator_cdc_m0_limiter_cmd_valid_data;                             // pulsegenerator_cdc_m0_limiter:cmd_src_valid -> cmd_demux:sink_valid

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (4),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (4),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) pulsegenerator_cdc_m0_translator (
		.clk                    (theta_clks_outclk0_clk),                                                   //                       clk.clk
		.reset                  (pulsegenerator_cdc_m0_reset_reset_bridge_in_reset_reset),                  //                     reset.reset
		.uav_address            (pulsegenerator_cdc_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (pulsegenerator_cdc_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (pulsegenerator_cdc_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (pulsegenerator_cdc_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (pulsegenerator_cdc_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (pulsegenerator_cdc_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (pulsegenerator_cdc_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (pulsegenerator_cdc_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (pulsegenerator_cdc_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (pulsegenerator_cdc_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (pulsegenerator_cdc_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (pulsegenerator_cdc_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (pulsegenerator_cdc_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (pulsegenerator_cdc_m0_burstcount),                                         //                          .burstcount
		.av_byteenable          (pulsegenerator_cdc_m0_byteenable),                                         //                          .byteenable
		.av_read                (pulsegenerator_cdc_m0_read),                                               //                          .read
		.av_readdata            (pulsegenerator_cdc_m0_readdata),                                           //                          .readdata
		.av_readdatavalid       (pulsegenerator_cdc_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write               (pulsegenerator_cdc_m0_write),                                              //                          .write
		.av_writedata           (pulsegenerator_cdc_m0_writedata),                                          //                          .writedata
		.av_debugaccess         (pulsegenerator_cdc_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                     //               (terminated)
		.av_begintransfer       (1'b0),                                                                     //               (terminated)
		.av_chipselect          (1'b0),                                                                     //               (terminated)
		.av_lock                (1'b0),                                                                     //               (terminated)
		.uav_clken              (),                                                                         //               (terminated)
		.av_clken               (1'b1),                                                                     //               (terminated)
		.uav_response           (2'b00),                                                                    //               (terminated)
		.av_response            (),                                                                         //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                     //               (terminated)
		.av_writeresponsevalid  ()                                                                          //               (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (73),
		.PKT_ORI_BURST_SIZE_L      (71),
		.PKT_RESPONSE_STATUS_H     (70),
		.PKT_RESPONSE_STATUS_L     (69),
		.PKT_QOS_H                 (58),
		.PKT_QOS_L                 (58),
		.PKT_DATA_SIDEBAND_H       (56),
		.PKT_DATA_SIDEBAND_L       (56),
		.PKT_ADDR_SIDEBAND_H       (55),
		.PKT_ADDR_SIDEBAND_L       (55),
		.PKT_BURST_TYPE_H          (54),
		.PKT_BURST_TYPE_L          (53),
		.PKT_CACHE_H               (68),
		.PKT_CACHE_L               (65),
		.PKT_THREAD_ID_H           (61),
		.PKT_THREAD_ID_L           (61),
		.PKT_BURST_SIZE_H          (52),
		.PKT_BURST_SIZE_L          (50),
		.PKT_TRANS_EXCLUSIVE       (45),
		.PKT_TRANS_LOCK            (44),
		.PKT_BEGIN_BURST           (57),
		.PKT_PROTECTION_H          (64),
		.PKT_PROTECTION_L          (62),
		.PKT_BURSTWRAP_H           (49),
		.PKT_BURSTWRAP_L           (49),
		.PKT_BYTE_CNT_H            (48),
		.PKT_BYTE_CNT_L            (46),
		.PKT_ADDR_H                (39),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (40),
		.PKT_TRANS_POSTED          (41),
		.PKT_TRANS_WRITE           (42),
		.PKT_TRANS_READ            (43),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (59),
		.PKT_SRC_ID_L              (59),
		.PKT_DEST_ID_H             (60),
		.PKT_DEST_ID_L             (60),
		.ST_DATA_W                 (74),
		.ST_CHANNEL_W              (2),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) pulsegenerator_cdc_m0_agent (
		.clk                   (theta_clks_outclk0_clk),                                                   //       clk.clk
		.reset                 (pulsegenerator_cdc_m0_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.av_address            (pulsegenerator_cdc_m0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (pulsegenerator_cdc_m0_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (pulsegenerator_cdc_m0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (pulsegenerator_cdc_m0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (pulsegenerator_cdc_m0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (pulsegenerator_cdc_m0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (pulsegenerator_cdc_m0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (pulsegenerator_cdc_m0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (pulsegenerator_cdc_m0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (pulsegenerator_cdc_m0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (pulsegenerator_cdc_m0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (pulsegenerator_cdc_m0_agent_cp_valid),                                     //        cp.valid
		.cp_data               (pulsegenerator_cdc_m0_agent_cp_data),                                      //          .data
		.cp_startofpacket      (pulsegenerator_cdc_m0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (pulsegenerator_cdc_m0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (pulsegenerator_cdc_m0_agent_cp_ready),                                     //          .ready
		.rp_valid              (pulsegenerator_cdc_m0_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (pulsegenerator_cdc_m0_limiter_rsp_src_data),                               //          .data
		.rp_channel            (pulsegenerator_cdc_m0_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (pulsegenerator_cdc_m0_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (pulsegenerator_cdc_m0_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (pulsegenerator_cdc_m0_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                         // (terminated)
		.av_writeresponsevalid ()                                                                          // (terminated)
	);

	altera_merlin_axi_slave_ni #(
		.PKT_QOS_H                   (58),
		.PKT_QOS_L                   (58),
		.PKT_THREAD_ID_H             (61),
		.PKT_THREAD_ID_L             (61),
		.PKT_RESPONSE_STATUS_H       (70),
		.PKT_RESPONSE_STATUS_L       (69),
		.PKT_BEGIN_BURST             (57),
		.PKT_CACHE_H                 (68),
		.PKT_CACHE_L                 (65),
		.PKT_DATA_SIDEBAND_H         (56),
		.PKT_DATA_SIDEBAND_L         (56),
		.PKT_ADDR_SIDEBAND_H         (55),
		.PKT_ADDR_SIDEBAND_L         (55),
		.PKT_BURST_TYPE_H            (54),
		.PKT_BURST_TYPE_L            (53),
		.PKT_PROTECTION_H            (64),
		.PKT_PROTECTION_L            (62),
		.PKT_BURST_SIZE_H            (52),
		.PKT_BURST_SIZE_L            (50),
		.PKT_BURSTWRAP_H             (49),
		.PKT_BURSTWRAP_L             (49),
		.PKT_BYTE_CNT_H              (48),
		.PKT_BYTE_CNT_L              (46),
		.PKT_ADDR_H                  (39),
		.PKT_ADDR_L                  (36),
		.PKT_TRANS_EXCLUSIVE         (45),
		.PKT_TRANS_LOCK              (44),
		.PKT_TRANS_COMPRESSED_READ   (40),
		.PKT_TRANS_POSTED            (41),
		.PKT_TRANS_WRITE             (42),
		.PKT_TRANS_READ              (43),
		.PKT_DATA_H                  (31),
		.PKT_DATA_L                  (0),
		.PKT_BYTEEN_H                (35),
		.PKT_BYTEEN_L                (32),
		.PKT_SRC_ID_H                (59),
		.PKT_SRC_ID_L                (59),
		.PKT_DEST_ID_H               (60),
		.PKT_DEST_ID_L               (60),
		.PKT_ORI_BURST_SIZE_L        (71),
		.PKT_ORI_BURST_SIZE_H        (73),
		.ADDR_USER_WIDTH             (1),
		.DATA_USER_WIDTH             (1),
		.ST_DATA_W                   (74),
		.ADDR_WIDTH                  (4),
		.RDATA_WIDTH                 (32),
		.WDATA_WIDTH                 (32),
		.ST_CHANNEL_W                (2),
		.AXI_SLAVE_ID_W              (1),
		.PASS_ID_TO_SLAVE            (0),
		.AXI_VERSION                 ("AXI4Lite"),
		.WRITE_ACCEPTANCE_CAPABILITY (1),
		.READ_ACCEPTANCE_CAPABILITY  (1)
	) pulsegenerator_altera_axi4lite_slave_agent (
		.aclk                   (theta_clks_outclk0_clk),                                            //        clock_sink.clk
		.aresetn                (~pulsegenerator_cdc_m0_reset_reset_bridge_in_reset_reset),          //        reset_sink.reset_n
		.read_cp_valid          (cmd_mux_001_src_valid),                                             //           read_cp.valid
		.read_cp_ready          (cmd_mux_001_src_ready),                                             //                  .ready
		.read_cp_data           (cmd_mux_001_src_data),                                              //                  .data
		.read_cp_channel        (cmd_mux_001_src_channel),                                           //                  .channel
		.read_cp_startofpacket  (cmd_mux_001_src_startofpacket),                                     //                  .startofpacket
		.read_cp_endofpacket    (cmd_mux_001_src_endofpacket),                                       //                  .endofpacket
		.write_cp_ready         (cmd_mux_src_ready),                                                 //          write_cp.ready
		.write_cp_valid         (cmd_mux_src_valid),                                                 //                  .valid
		.write_cp_data          (cmd_mux_src_data),                                                  //                  .data
		.write_cp_channel       (cmd_mux_src_channel),                                               //                  .channel
		.write_cp_startofpacket (cmd_mux_src_startofpacket),                                         //                  .startofpacket
		.write_cp_endofpacket   (cmd_mux_src_endofpacket),                                           //                  .endofpacket
		.read_rp_ready          (pulsegenerator_altera_axi4lite_slave_agent_read_rp_ready),          //           read_rp.ready
		.read_rp_valid          (pulsegenerator_altera_axi4lite_slave_agent_read_rp_valid),          //                  .valid
		.read_rp_data           (pulsegenerator_altera_axi4lite_slave_agent_read_rp_data),           //                  .data
		.read_rp_startofpacket  (pulsegenerator_altera_axi4lite_slave_agent_read_rp_startofpacket),  //                  .startofpacket
		.read_rp_endofpacket    (pulsegenerator_altera_axi4lite_slave_agent_read_rp_endofpacket),    //                  .endofpacket
		.write_rp_ready         (pulsegenerator_altera_axi4lite_slave_agent_write_rp_ready),         //          write_rp.ready
		.write_rp_valid         (pulsegenerator_altera_axi4lite_slave_agent_write_rp_valid),         //                  .valid
		.write_rp_data          (pulsegenerator_altera_axi4lite_slave_agent_write_rp_data),          //                  .data
		.write_rp_startofpacket (pulsegenerator_altera_axi4lite_slave_agent_write_rp_startofpacket), //                  .startofpacket
		.write_rp_endofpacket   (pulsegenerator_altera_axi4lite_slave_agent_write_rp_endofpacket),   //                  .endofpacket
		.awaddr                 (pulsegenerator_altera_axi4lite_slave_awaddr),                       // altera_axi_master.awaddr
		.awprot                 (pulsegenerator_altera_axi4lite_slave_awprot),                       //                  .awprot
		.awvalid                (pulsegenerator_altera_axi4lite_slave_awvalid),                      //                  .awvalid
		.awready                (pulsegenerator_altera_axi4lite_slave_awready),                      //                  .awready
		.wdata                  (pulsegenerator_altera_axi4lite_slave_wdata),                        //                  .wdata
		.wstrb                  (pulsegenerator_altera_axi4lite_slave_wstrb),                        //                  .wstrb
		.wvalid                 (pulsegenerator_altera_axi4lite_slave_wvalid),                       //                  .wvalid
		.wready                 (pulsegenerator_altera_axi4lite_slave_wready),                       //                  .wready
		.bresp                  (pulsegenerator_altera_axi4lite_slave_bresp),                        //                  .bresp
		.bvalid                 (pulsegenerator_altera_axi4lite_slave_bvalid),                       //                  .bvalid
		.bready                 (pulsegenerator_altera_axi4lite_slave_bready),                       //                  .bready
		.araddr                 (pulsegenerator_altera_axi4lite_slave_araddr),                       //                  .araddr
		.arprot                 (pulsegenerator_altera_axi4lite_slave_arprot),                       //                  .arprot
		.arvalid                (pulsegenerator_altera_axi4lite_slave_arvalid),                      //                  .arvalid
		.arready                (pulsegenerator_altera_axi4lite_slave_arready),                      //                  .arready
		.rdata                  (pulsegenerator_altera_axi4lite_slave_rdata),                        //                  .rdata
		.rresp                  (pulsegenerator_altera_axi4lite_slave_rresp),                        //                  .rresp
		.rvalid                 (pulsegenerator_altera_axi4lite_slave_rvalid),                       //                  .rvalid
		.rready                 (pulsegenerator_altera_axi4lite_slave_rready)                        //                  .rready
	);

	soc_system_mm_interconnect_3_router router (
		.sink_ready         (pulsegenerator_cdc_m0_agent_cp_ready),                    //      sink.ready
		.sink_valid         (pulsegenerator_cdc_m0_agent_cp_valid),                    //          .valid
		.sink_data          (pulsegenerator_cdc_m0_agent_cp_data),                     //          .data
		.sink_startofpacket (pulsegenerator_cdc_m0_agent_cp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (pulsegenerator_cdc_m0_agent_cp_endofpacket),              //          .endofpacket
		.clk                (theta_clks_outclk0_clk),                                  //       clk.clk
		.reset              (pulsegenerator_cdc_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                        //       src.ready
		.src_valid          (router_src_valid),                                        //          .valid
		.src_data           (router_src_data),                                         //          .data
		.src_channel        (router_src_channel),                                      //          .channel
		.src_startofpacket  (router_src_startofpacket),                                //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                   //          .endofpacket
	);

	soc_system_mm_interconnect_3_router_001 router_001 (
		.sink_ready         (pulsegenerator_altera_axi4lite_slave_agent_write_rp_ready),         //      sink.ready
		.sink_valid         (pulsegenerator_altera_axi4lite_slave_agent_write_rp_valid),         //          .valid
		.sink_data          (pulsegenerator_altera_axi4lite_slave_agent_write_rp_data),          //          .data
		.sink_startofpacket (pulsegenerator_altera_axi4lite_slave_agent_write_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (pulsegenerator_altera_axi4lite_slave_agent_write_rp_endofpacket),   //          .endofpacket
		.clk                (theta_clks_outclk0_clk),                                            //       clk.clk
		.reset              (pulsegenerator_cdc_m0_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.src_ready          (router_001_src_ready),                                              //       src.ready
		.src_valid          (router_001_src_valid),                                              //          .valid
		.src_data           (router_001_src_data),                                               //          .data
		.src_channel        (router_001_src_channel),                                            //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                      //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                         //          .endofpacket
	);

	soc_system_mm_interconnect_3_router_001 router_002 (
		.sink_ready         (pulsegenerator_altera_axi4lite_slave_agent_read_rp_ready),         //      sink.ready
		.sink_valid         (pulsegenerator_altera_axi4lite_slave_agent_read_rp_valid),         //          .valid
		.sink_data          (pulsegenerator_altera_axi4lite_slave_agent_read_rp_data),          //          .data
		.sink_startofpacket (pulsegenerator_altera_axi4lite_slave_agent_read_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (pulsegenerator_altera_axi4lite_slave_agent_read_rp_endofpacket),   //          .endofpacket
		.clk                (theta_clks_outclk0_clk),                                           //       clk.clk
		.reset              (pulsegenerator_cdc_m0_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.src_ready          (router_002_src_ready),                                             //       src.ready
		.src_valid          (router_002_src_valid),                                             //          .valid
		.src_data           (router_002_src_data),                                              //          .data
		.src_channel        (router_002_src_channel),                                           //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                        //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (60),
		.PKT_DEST_ID_L             (60),
		.PKT_SRC_ID_H              (59),
		.PKT_SRC_ID_L              (59),
		.PKT_BYTE_CNT_H            (48),
		.PKT_BYTE_CNT_L            (46),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (41),
		.PKT_TRANS_WRITE           (42),
		.MAX_OUTSTANDING_RESPONSES (1),
		.PIPELINED                 (0),
		.ST_DATA_W                 (74),
		.ST_CHANNEL_W              (2),
		.VALID_WIDTH               (2),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (1),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) pulsegenerator_cdc_m0_limiter (
		.clk                    (theta_clks_outclk0_clk),                                  //       clk.clk
		.reset                  (pulsegenerator_cdc_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                        //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                        //          .valid
		.cmd_sink_data          (router_src_data),                                         //          .data
		.cmd_sink_channel       (router_src_channel),                                      //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                  //          .endofpacket
		.cmd_src_ready          (pulsegenerator_cdc_m0_limiter_cmd_src_ready),             //   cmd_src.ready
		.cmd_src_data           (pulsegenerator_cdc_m0_limiter_cmd_src_data),              //          .data
		.cmd_src_channel        (pulsegenerator_cdc_m0_limiter_cmd_src_channel),           //          .channel
		.cmd_src_startofpacket  (pulsegenerator_cdc_m0_limiter_cmd_src_startofpacket),     //          .startofpacket
		.cmd_src_endofpacket    (pulsegenerator_cdc_m0_limiter_cmd_src_endofpacket),       //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                       //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                       //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                     //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                        //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                               //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                 //          .endofpacket
		.rsp_src_ready          (pulsegenerator_cdc_m0_limiter_rsp_src_ready),             //   rsp_src.ready
		.rsp_src_valid          (pulsegenerator_cdc_m0_limiter_rsp_src_valid),             //          .valid
		.rsp_src_data           (pulsegenerator_cdc_m0_limiter_rsp_src_data),              //          .data
		.rsp_src_channel        (pulsegenerator_cdc_m0_limiter_rsp_src_channel),           //          .channel
		.rsp_src_startofpacket  (pulsegenerator_cdc_m0_limiter_rsp_src_startofpacket),     //          .startofpacket
		.rsp_src_endofpacket    (pulsegenerator_cdc_m0_limiter_rsp_src_endofpacket),       //          .endofpacket
		.cmd_src_valid          (pulsegenerator_cdc_m0_limiter_cmd_valid_data)             // cmd_valid.data
	);

	soc_system_mm_interconnect_3_cmd_demux cmd_demux (
		.clk                (theta_clks_outclk0_clk),                                  //        clk.clk
		.reset              (pulsegenerator_cdc_m0_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (pulsegenerator_cdc_m0_limiter_cmd_src_ready),             //       sink.ready
		.sink_channel       (pulsegenerator_cdc_m0_limiter_cmd_src_channel),           //           .channel
		.sink_data          (pulsegenerator_cdc_m0_limiter_cmd_src_data),              //           .data
		.sink_startofpacket (pulsegenerator_cdc_m0_limiter_cmd_src_startofpacket),     //           .startofpacket
		.sink_endofpacket   (pulsegenerator_cdc_m0_limiter_cmd_src_endofpacket),       //           .endofpacket
		.sink_valid         (pulsegenerator_cdc_m0_limiter_cmd_valid_data),            // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                                    //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                    //           .valid
		.src0_data          (cmd_demux_src0_data),                                     //           .data
		.src0_channel       (cmd_demux_src0_channel),                                  //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                            //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                              //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                    //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                    //           .valid
		.src1_data          (cmd_demux_src1_data),                                     //           .data
		.src1_channel       (cmd_demux_src1_channel),                                  //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                            //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket)                               //           .endofpacket
	);

	soc_system_mm_interconnect_3_cmd_mux cmd_mux (
		.clk                 (theta_clks_outclk0_clk),                                  //       clk.clk
		.reset               (pulsegenerator_cdc_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                       //       src.ready
		.src_valid           (cmd_mux_src_valid),                                       //          .valid
		.src_data            (cmd_mux_src_data),                                        //          .data
		.src_channel         (cmd_mux_src_channel),                                     //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                               //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                 //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                    //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                    //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                                  //          .channel
		.sink0_data          (cmd_demux_src0_data),                                     //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                               //          .endofpacket
	);

	soc_system_mm_interconnect_3_cmd_mux cmd_mux_001 (
		.clk                 (theta_clks_outclk0_clk),                                  //       clk.clk
		.reset               (pulsegenerator_cdc_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                   //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                   //          .valid
		.src_data            (cmd_mux_001_src_data),                                    //          .data
		.src_channel         (cmd_mux_001_src_channel),                                 //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                           //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                             //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                                    //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                                    //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                                  //          .channel
		.sink0_data          (cmd_demux_src1_data),                                     //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                               //          .endofpacket
	);

	soc_system_mm_interconnect_3_rsp_demux rsp_demux (
		.clk                (theta_clks_outclk0_clk),                                  //       clk.clk
		.reset              (pulsegenerator_cdc_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                                    //      sink.ready
		.sink_channel       (router_001_src_channel),                                  //          .channel
		.sink_data          (router_001_src_data),                                     //          .data
		.sink_startofpacket (router_001_src_startofpacket),                            //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                              //          .endofpacket
		.sink_valid         (router_001_src_valid),                                    //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                    //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                    //          .valid
		.src0_data          (rsp_demux_src0_data),                                     //          .data
		.src0_channel       (rsp_demux_src0_channel),                                  //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                            //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                               //          .endofpacket
	);

	soc_system_mm_interconnect_3_rsp_demux rsp_demux_001 (
		.clk                (theta_clks_outclk0_clk),                                  //       clk.clk
		.reset              (pulsegenerator_cdc_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                                    //      sink.ready
		.sink_channel       (router_002_src_channel),                                  //          .channel
		.sink_data          (router_002_src_data),                                     //          .data
		.sink_startofpacket (router_002_src_startofpacket),                            //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                              //          .endofpacket
		.sink_valid         (router_002_src_valid),                                    //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                //          .valid
		.src0_data          (rsp_demux_001_src0_data),                                 //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                              //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                        //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_3_rsp_mux rsp_mux (
		.clk                 (theta_clks_outclk0_clk),                                  //       clk.clk
		.reset               (pulsegenerator_cdc_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                       //       src.ready
		.src_valid           (rsp_mux_src_valid),                                       //          .valid
		.src_data            (rsp_mux_src_data),                                        //          .data
		.src_channel         (rsp_mux_src_channel),                                     //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                               //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                 //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                    //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                    //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                  //          .channel
		.sink0_data          (rsp_demux_src0_data),                                     //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                            //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                              //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                                //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                                //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                              //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                                 //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),                        //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket)                           //          .endofpacket
	);

endmodule
