#ifndef _ALTERA_HPS_0_H_
#define _ALTERA_HPS_0_H_

/*
 * This file was automatically generated by the swinfo2header utility.
 * 
 * Created from SOPC Builder system 'soc_system' in
 * file './soc_system.sopcinfo'.
 */

/*
 * This file contains macros for module 'hps_0' and devices
 * connected to the following masters:
 *   h2f_axi_master
 *   h2f_lw_axi_master
 * 
 * Do not include this header file and another header file created for a
 * different module or master group at the same time.
 * Doing so may result in duplicate macro names.
 * Instead, use the system header file which has macros with unique names.
 */

/*
 * Macros for device 'theta_pll_reconfig', class 'altera_pll_reconfig'
 * The macros are prefixed with 'THETA_PLL_RECONFIG_'.
 * The prefix is the slave descriptor.
 */
#define THETA_PLL_RECONFIG_COMPONENT_TYPE altera_pll_reconfig
#define THETA_PLL_RECONFIG_COMPONENT_NAME theta_pll_reconfig
#define THETA_PLL_RECONFIG_BASE 0x0
#define THETA_PLL_RECONFIG_SPAN 256
#define THETA_PLL_RECONFIG_END 0xff

/*
 * Macros for device 'DMA_to_SDRAM_csr', class 'altera_msgdma'
 * The macros are prefixed with 'DMA_TO_SDRAM_CSR_'.
 * The prefix is the slave descriptor.
 */
#define DMA_TO_SDRAM_CSR_COMPONENT_TYPE altera_msgdma
#define DMA_TO_SDRAM_CSR_COMPONENT_NAME DMA_to_SDRAM
#define DMA_TO_SDRAM_CSR_BASE 0x40
#define DMA_TO_SDRAM_CSR_SPAN 32
#define DMA_TO_SDRAM_CSR_END 0x5f
#define DMA_TO_SDRAM_CSR_IRQ 1
#define DMA_TO_SDRAM_CSR_BURST_ENABLE 1
#define DMA_TO_SDRAM_CSR_BURST_WRAPPING_SUPPORT 1
#define DMA_TO_SDRAM_CSR_CHANNEL_ENABLE 0
#define DMA_TO_SDRAM_CSR_CHANNEL_ENABLE_DERIVED 0
#define DMA_TO_SDRAM_CSR_CHANNEL_WIDTH 8
#define DMA_TO_SDRAM_CSR_DATA_FIFO_DEPTH 2048
#define DMA_TO_SDRAM_CSR_DATA_WIDTH 256
#define DMA_TO_SDRAM_CSR_DESCRIPTOR_FIFO_DEPTH 64
#define DMA_TO_SDRAM_CSR_DMA_MODE 2
#define DMA_TO_SDRAM_CSR_ENHANCED_FEATURES 0
#define DMA_TO_SDRAM_CSR_ERROR_ENABLE 0
#define DMA_TO_SDRAM_CSR_ERROR_ENABLE_DERIVED 0
#define DMA_TO_SDRAM_CSR_ERROR_WIDTH 8
#define DMA_TO_SDRAM_CSR_MAX_BURST_COUNT 8
#define DMA_TO_SDRAM_CSR_MAX_BYTE 65536
#define DMA_TO_SDRAM_CSR_MAX_STRIDE 1
#define DMA_TO_SDRAM_CSR_PACKET_ENABLE 0
#define DMA_TO_SDRAM_CSR_PACKET_ENABLE_DERIVED 0
#define DMA_TO_SDRAM_CSR_PREFETCHER_ENABLE 0
#define DMA_TO_SDRAM_CSR_PROGRAMMABLE_BURST_ENABLE 0
#define DMA_TO_SDRAM_CSR_RESPONSE_PORT 2
#define DMA_TO_SDRAM_CSR_STRIDE_ENABLE 0
#define DMA_TO_SDRAM_CSR_STRIDE_ENABLE_DERIVED 0
#define DMA_TO_SDRAM_CSR_TRANSFER_TYPE Full Word Accesses Only

/*
 * Macros for device 'DMA_to_SDRAM_descriptor_slave', class 'altera_msgdma'
 * The macros are prefixed with 'DMA_TO_SDRAM_DESCRIPTOR_SLAVE_'.
 * The prefix is the slave descriptor.
 */
#define DMA_TO_SDRAM_DESCRIPTOR_SLAVE_COMPONENT_TYPE altera_msgdma
#define DMA_TO_SDRAM_DESCRIPTOR_SLAVE_COMPONENT_NAME DMA_to_SDRAM
#define DMA_TO_SDRAM_DESCRIPTOR_SLAVE_BASE 0x60
#define DMA_TO_SDRAM_DESCRIPTOR_SLAVE_SPAN 16
#define DMA_TO_SDRAM_DESCRIPTOR_SLAVE_END 0x6f
#define DMA_TO_SDRAM_DESCRIPTOR_SLAVE_BURST_ENABLE 1
#define DMA_TO_SDRAM_DESCRIPTOR_SLAVE_BURST_WRAPPING_SUPPORT 1
#define DMA_TO_SDRAM_DESCRIPTOR_SLAVE_CHANNEL_ENABLE 0
#define DMA_TO_SDRAM_DESCRIPTOR_SLAVE_CHANNEL_ENABLE_DERIVED 0
#define DMA_TO_SDRAM_DESCRIPTOR_SLAVE_CHANNEL_WIDTH 8
#define DMA_TO_SDRAM_DESCRIPTOR_SLAVE_DATA_FIFO_DEPTH 2048
#define DMA_TO_SDRAM_DESCRIPTOR_SLAVE_DATA_WIDTH 256
#define DMA_TO_SDRAM_DESCRIPTOR_SLAVE_DESCRIPTOR_FIFO_DEPTH 64
#define DMA_TO_SDRAM_DESCRIPTOR_SLAVE_DMA_MODE 2
#define DMA_TO_SDRAM_DESCRIPTOR_SLAVE_ENHANCED_FEATURES 0
#define DMA_TO_SDRAM_DESCRIPTOR_SLAVE_ERROR_ENABLE 0
#define DMA_TO_SDRAM_DESCRIPTOR_SLAVE_ERROR_ENABLE_DERIVED 0
#define DMA_TO_SDRAM_DESCRIPTOR_SLAVE_ERROR_WIDTH 8
#define DMA_TO_SDRAM_DESCRIPTOR_SLAVE_MAX_BURST_COUNT 8
#define DMA_TO_SDRAM_DESCRIPTOR_SLAVE_MAX_BYTE 65536
#define DMA_TO_SDRAM_DESCRIPTOR_SLAVE_MAX_STRIDE 1
#define DMA_TO_SDRAM_DESCRIPTOR_SLAVE_PACKET_ENABLE 0
#define DMA_TO_SDRAM_DESCRIPTOR_SLAVE_PACKET_ENABLE_DERIVED 0
#define DMA_TO_SDRAM_DESCRIPTOR_SLAVE_PREFETCHER_ENABLE 0
#define DMA_TO_SDRAM_DESCRIPTOR_SLAVE_PROGRAMMABLE_BURST_ENABLE 0
#define DMA_TO_SDRAM_DESCRIPTOR_SLAVE_RESPONSE_PORT 2
#define DMA_TO_SDRAM_DESCRIPTOR_SLAVE_STRIDE_ENABLE 0
#define DMA_TO_SDRAM_DESCRIPTOR_SLAVE_STRIDE_ENABLE_DERIVED 0
#define DMA_TO_SDRAM_DESCRIPTOR_SLAVE_TRANSFER_TYPE Full Word Accesses Only

/*
 * Macros for device 'theta_pll_reset_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'THETA_PLL_RESET_PIO_'.
 * The prefix is the slave descriptor.
 */
#define THETA_PLL_RESET_PIO_COMPONENT_TYPE altera_avalon_pio
#define THETA_PLL_RESET_PIO_COMPONENT_NAME theta_pll_reset_pio
#define THETA_PLL_RESET_PIO_BASE 0x1000200
#define THETA_PLL_RESET_PIO_SPAN 16
#define THETA_PLL_RESET_PIO_END 0x100020f
#define THETA_PLL_RESET_PIO_BIT_CLEARING_EDGE_REGISTER 0
#define THETA_PLL_RESET_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define THETA_PLL_RESET_PIO_CAPTURE 0
#define THETA_PLL_RESET_PIO_DATA_WIDTH 32
#define THETA_PLL_RESET_PIO_DO_TEST_BENCH_WIRING 0
#define THETA_PLL_RESET_PIO_DRIVEN_SIM_VALUE 0
#define THETA_PLL_RESET_PIO_EDGE_TYPE NONE
#define THETA_PLL_RESET_PIO_FREQ 100000000
#define THETA_PLL_RESET_PIO_HAS_IN 0
#define THETA_PLL_RESET_PIO_HAS_OUT 1
#define THETA_PLL_RESET_PIO_HAS_TRI 0
#define THETA_PLL_RESET_PIO_IRQ_TYPE NONE
#define THETA_PLL_RESET_PIO_RESET_VALUE 0

/*
 * Macros for device 'theta_locked', class 'altera_avalon_pio'
 * The macros are prefixed with 'THETA_LOCKED_'.
 * The prefix is the slave descriptor.
 */
#define THETA_LOCKED_COMPONENT_TYPE altera_avalon_pio
#define THETA_LOCKED_COMPONENT_NAME theta_locked
#define THETA_LOCKED_BASE 0x1000300
#define THETA_LOCKED_SPAN 16
#define THETA_LOCKED_END 0x100030f
#define THETA_LOCKED_BIT_CLEARING_EDGE_REGISTER 0
#define THETA_LOCKED_BIT_MODIFYING_OUTPUT_REGISTER 0
#define THETA_LOCKED_CAPTURE 0
#define THETA_LOCKED_DATA_WIDTH 32
#define THETA_LOCKED_DO_TEST_BENCH_WIRING 0
#define THETA_LOCKED_DRIVEN_SIM_VALUE 0
#define THETA_LOCKED_EDGE_TYPE NONE
#define THETA_LOCKED_FREQ 100000000
#define THETA_LOCKED_HAS_IN 1
#define THETA_LOCKED_HAS_OUT 0
#define THETA_LOCKED_HAS_TRI 0
#define THETA_LOCKED_IRQ_TYPE NONE
#define THETA_LOCKED_RESET_VALUE 0

/*
 * Macros for device 'phi_pll_reconfig', class 'altera_pll_reconfig'
 * The macros are prefixed with 'PHI_PLL_RECONFIG_'.
 * The prefix is the slave descriptor.
 */
#define PHI_PLL_RECONFIG_COMPONENT_TYPE altera_pll_reconfig
#define PHI_PLL_RECONFIG_COMPONENT_NAME phi_pll_reconfig
#define PHI_PLL_RECONFIG_BASE 0x1000400
#define PHI_PLL_RECONFIG_SPAN 256
#define PHI_PLL_RECONFIG_END 0x10004ff

/*
 * Macros for device 'phi_pll_reset_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'PHI_PLL_RESET_PIO_'.
 * The prefix is the slave descriptor.
 */
#define PHI_PLL_RESET_PIO_COMPONENT_TYPE altera_avalon_pio
#define PHI_PLL_RESET_PIO_COMPONENT_NAME phi_pll_reset_pio
#define PHI_PLL_RESET_PIO_BASE 0x1000500
#define PHI_PLL_RESET_PIO_SPAN 16
#define PHI_PLL_RESET_PIO_END 0x100050f
#define PHI_PLL_RESET_PIO_BIT_CLEARING_EDGE_REGISTER 0
#define PHI_PLL_RESET_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PHI_PLL_RESET_PIO_CAPTURE 0
#define PHI_PLL_RESET_PIO_DATA_WIDTH 32
#define PHI_PLL_RESET_PIO_DO_TEST_BENCH_WIRING 0
#define PHI_PLL_RESET_PIO_DRIVEN_SIM_VALUE 0
#define PHI_PLL_RESET_PIO_EDGE_TYPE NONE
#define PHI_PLL_RESET_PIO_FREQ 100000000
#define PHI_PLL_RESET_PIO_HAS_IN 0
#define PHI_PLL_RESET_PIO_HAS_OUT 1
#define PHI_PLL_RESET_PIO_HAS_TRI 0
#define PHI_PLL_RESET_PIO_IRQ_TYPE NONE
#define PHI_PLL_RESET_PIO_RESET_VALUE 0

/*
 * Macros for device 'phi_locked', class 'altera_avalon_pio'
 * The macros are prefixed with 'PHI_LOCKED_'.
 * The prefix is the slave descriptor.
 */
#define PHI_LOCKED_COMPONENT_TYPE altera_avalon_pio
#define PHI_LOCKED_COMPONENT_NAME phi_locked
#define PHI_LOCKED_BASE 0x1000600
#define PHI_LOCKED_SPAN 16
#define PHI_LOCKED_END 0x100060f
#define PHI_LOCKED_BIT_CLEARING_EDGE_REGISTER 0
#define PHI_LOCKED_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PHI_LOCKED_CAPTURE 0
#define PHI_LOCKED_DATA_WIDTH 32
#define PHI_LOCKED_DO_TEST_BENCH_WIRING 0
#define PHI_LOCKED_DRIVEN_SIM_VALUE 0
#define PHI_LOCKED_EDGE_TYPE NONE
#define PHI_LOCKED_FREQ 100000000
#define PHI_LOCKED_HAS_IN 1
#define PHI_LOCKED_HAS_OUT 0
#define PHI_LOCKED_HAS_TRI 0
#define PHI_LOCKED_IRQ_TYPE NONE
#define PHI_LOCKED_RESET_VALUE 0

/*
 * Macros for device 'tdc_reset_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'TDC_RESET_PIO_'.
 * The prefix is the slave descriptor.
 */
#define TDC_RESET_PIO_COMPONENT_TYPE altera_avalon_pio
#define TDC_RESET_PIO_COMPONENT_NAME tdc_reset_pio
#define TDC_RESET_PIO_BASE 0x1000800
#define TDC_RESET_PIO_SPAN 16
#define TDC_RESET_PIO_END 0x100080f
#define TDC_RESET_PIO_BIT_CLEARING_EDGE_REGISTER 0
#define TDC_RESET_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define TDC_RESET_PIO_CAPTURE 0
#define TDC_RESET_PIO_DATA_WIDTH 32
#define TDC_RESET_PIO_DO_TEST_BENCH_WIRING 0
#define TDC_RESET_PIO_DRIVEN_SIM_VALUE 0
#define TDC_RESET_PIO_EDGE_TYPE NONE
#define TDC_RESET_PIO_FREQ 100000000
#define TDC_RESET_PIO_HAS_IN 0
#define TDC_RESET_PIO_HAS_OUT 1
#define TDC_RESET_PIO_HAS_TRI 0
#define TDC_RESET_PIO_IRQ_TYPE NONE
#define TDC_RESET_PIO_RESET_VALUE 0

/*
 * Macros for device 'ip_sync_niosv', class 'ip_sync'
 * The macros are prefixed with 'IP_SYNC_NIOSV_'.
 * The prefix is the slave descriptor.
 */
#define IP_SYNC_NIOSV_COMPONENT_TYPE ip_sync
#define IP_SYNC_NIOSV_COMPONENT_NAME ip_sync_niosv
#define IP_SYNC_NIOSV_BASE 0x1000c00
#define IP_SYNC_NIOSV_SPAN 1024
#define IP_SYNC_NIOSV_END 0x1000fff

/*
 * Macros for device 'pulsegenerator', class 'pulse_generator'
 * The macros are prefixed with 'PULSEGENERATOR_'.
 * The prefix is the slave descriptor.
 */
#define PULSEGENERATOR_COMPONENT_TYPE pulse_generator
#define PULSEGENERATOR_COMPONENT_NAME pulsegenerator
#define PULSEGENERATOR_BASE 0x1001000
#define PULSEGENERATOR_SPAN 16
#define PULSEGENERATOR_END 0x100100f

/*
 * Macros for device 'peripheral_mem', class 'altera_avalon_onchip_memory2'
 * The macros are prefixed with 'PERIPHERAL_MEM_'.
 * The prefix is the slave descriptor.
 */
#define PERIPHERAL_MEM_COMPONENT_TYPE altera_avalon_onchip_memory2
#define PERIPHERAL_MEM_COMPONENT_NAME peripheral_mem
#define PERIPHERAL_MEM_BASE 0x1002000
#define PERIPHERAL_MEM_SPAN 512
#define PERIPHERAL_MEM_END 0x10021ff
#define PERIPHERAL_MEM_ALLOW_IN_SYSTEM_MEMORY_CONTENT_EDITOR 0
#define PERIPHERAL_MEM_ALLOW_MRAM_SIM_CONTENTS_ONLY_FILE 0
#define PERIPHERAL_MEM_CONTENTS_INFO ""
#define PERIPHERAL_MEM_DUAL_PORT 1
#define PERIPHERAL_MEM_GUI_RAM_BLOCK_TYPE AUTO
#define PERIPHERAL_MEM_INIT_CONTENTS_FILE soc_system_peripheral_mem
#define PERIPHERAL_MEM_INIT_MEM_CONTENT 1
#define PERIPHERAL_MEM_INSTANCE_ID NONE
#define PERIPHERAL_MEM_NON_DEFAULT_INIT_FILE_ENABLED 0
#define PERIPHERAL_MEM_RAM_BLOCK_TYPE AUTO
#define PERIPHERAL_MEM_READ_DURING_WRITE_MODE DONT_CARE
#define PERIPHERAL_MEM_SINGLE_CLOCK_OP 0
#define PERIPHERAL_MEM_SIZE_MULTIPLE 1
#define PERIPHERAL_MEM_SIZE_VALUE 512
#define PERIPHERAL_MEM_WRITABLE 1
#define PERIPHERAL_MEM_MEMORY_INFO_DAT_SYM_INSTALL_DIR SIM_DIR
#define PERIPHERAL_MEM_MEMORY_INFO_GENERATE_DAT_SYM 1
#define PERIPHERAL_MEM_MEMORY_INFO_GENERATE_HEX 1
#define PERIPHERAL_MEM_MEMORY_INFO_HAS_BYTE_LANE 0
#define PERIPHERAL_MEM_MEMORY_INFO_HEX_INSTALL_DIR QPF_DIR
#define PERIPHERAL_MEM_MEMORY_INFO_MEM_INIT_DATA_WIDTH 32
#define PERIPHERAL_MEM_MEMORY_INFO_MEM_INIT_FILENAME soc_system_peripheral_mem


#endif /* _ALTERA_HPS_0_H_ */
