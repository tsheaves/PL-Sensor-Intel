#ifndef _ALTERA_INTEL_NIOSV_M_0_H_
#define _ALTERA_INTEL_NIOSV_M_0_H_

/*
 * This file was automatically generated by the swinfo2header utility.
 * 
 * Created from SOPC Builder system 'soc_system' in
 * file './soc_system.sopcinfo'.
 */

/*
 * This file contains macros for module 'intel_niosv_m_0' and devices
 * connected to the following masters:
 *   instruction_manager
 *   data_manager
 * 
 * Do not include this header file and another header file created for a
 * different module or master group at the same time.
 * Doing so may result in duplicate macro names.
 * Instead, use the system header file which has macros with unique names.
 */

/*
 * Macros for module 'intel_niosv_m_0', class 'intel_niosv_m'.
 * The macros have no prefix.
 */
#define CPU_FREQ 25000000
#define DATA_ADDR_WIDTH 32
#define DCACHE_LINE_SIZE 0
#define DCACHE_LINE_SIZE_LOG2 0
#define DCACHE_SIZE 0
#define ICACHE_LINE_SIZE 0
#define ICACHE_LINE_SIZE_LOG2 0
#define ICACHE_SIZE 0
#define INST_ADDR_WIDTH 32
#define MTIME_OFFSET 0x00010000
#define NUM_GPR 32
#define RESET_ADDR 0x0
#define TICKS_PER_SEC no_quote(NIOSV_INTERNAL_TIMER_TICKS_PER_SECOND)
#define TIMER_DEVICE_TYPE 2

/*
 * Macros for device 'nios_v_ram', class 'altera_avalon_onchip_memory2'
 * The macros are prefixed with 'NIOS_V_RAM_'.
 * The prefix is the slave descriptor.
 */
#define NIOS_V_RAM_COMPONENT_TYPE altera_avalon_onchip_memory2
#define NIOS_V_RAM_COMPONENT_NAME nios_v_ram
#define NIOS_V_RAM_BASE 0x0
#define NIOS_V_RAM_SPAN 32768
#define NIOS_V_RAM_END 0x7fff
#define NIOS_V_RAM_ALLOW_IN_SYSTEM_MEMORY_CONTENT_EDITOR 0
#define NIOS_V_RAM_ALLOW_MRAM_SIM_CONTENTS_ONLY_FILE 0
#define NIOS_V_RAM_CONTENTS_INFO ""
#define NIOS_V_RAM_DUAL_PORT 0
#define NIOS_V_RAM_GUI_RAM_BLOCK_TYPE AUTO
#define NIOS_V_RAM_INIT_CONTENTS_FILE tiny_aes
#define NIOS_V_RAM_INIT_MEM_CONTENT 1
#define NIOS_V_RAM_INSTANCE_ID NONE
#define NIOS_V_RAM_NON_DEFAULT_INIT_FILE_ENABLED 1
#define NIOS_V_RAM_RAM_BLOCK_TYPE AUTO
#define NIOS_V_RAM_READ_DURING_WRITE_MODE DONT_CARE
#define NIOS_V_RAM_SINGLE_CLOCK_OP 0
#define NIOS_V_RAM_SIZE_MULTIPLE 1
#define NIOS_V_RAM_SIZE_VALUE 32768
#define NIOS_V_RAM_WRITABLE 1
#define NIOS_V_RAM_MEMORY_INFO_DAT_SYM_INSTALL_DIR SIM_DIR
#define NIOS_V_RAM_MEMORY_INFO_GENERATE_DAT_SYM 1
#define NIOS_V_RAM_MEMORY_INFO_GENERATE_HEX 1
#define NIOS_V_RAM_MEMORY_INFO_HAS_BYTE_LANE 0
#define NIOS_V_RAM_MEMORY_INFO_HEX_INSTALL_DIR QPF_DIR
#define NIOS_V_RAM_MEMORY_INFO_MEM_INIT_DATA_WIDTH 32
#define NIOS_V_RAM_MEMORY_INFO_MEM_INIT_FILENAME tiny_aes

/*
 * Macros for device 'peripheral_mem', class 'altera_avalon_onchip_memory2'
 * The macros are prefixed with 'PERIPHERAL_MEM_'.
 * The prefix is the slave descriptor.
 */
#define PERIPHERAL_MEM_COMPONENT_TYPE altera_avalon_onchip_memory2
#define PERIPHERAL_MEM_COMPONENT_NAME peripheral_mem
#define PERIPHERAL_MEM_BASE 0x8000
#define PERIPHERAL_MEM_SPAN 512
#define PERIPHERAL_MEM_END 0x81ff
#define PERIPHERAL_MEM_ALLOW_IN_SYSTEM_MEMORY_CONTENT_EDITOR 0
#define PERIPHERAL_MEM_ALLOW_MRAM_SIM_CONTENTS_ONLY_FILE 0
#define PERIPHERAL_MEM_CONTENTS_INFO ""
#define PERIPHERAL_MEM_DUAL_PORT 1
#define PERIPHERAL_MEM_GUI_RAM_BLOCK_TYPE AUTO
#define PERIPHERAL_MEM_INIT_CONTENTS_FILE soc_system_peripheral_mem
#define PERIPHERAL_MEM_INIT_MEM_CONTENT 1
#define PERIPHERAL_MEM_INSTANCE_ID NONE
#define PERIPHERAL_MEM_NON_DEFAULT_INIT_FILE_ENABLED 0
#define PERIPHERAL_MEM_RAM_BLOCK_TYPE AUTO
#define PERIPHERAL_MEM_READ_DURING_WRITE_MODE DONT_CARE
#define PERIPHERAL_MEM_SINGLE_CLOCK_OP 0
#define PERIPHERAL_MEM_SIZE_MULTIPLE 1
#define PERIPHERAL_MEM_SIZE_VALUE 512
#define PERIPHERAL_MEM_WRITABLE 1
#define PERIPHERAL_MEM_MEMORY_INFO_DAT_SYM_INSTALL_DIR SIM_DIR
#define PERIPHERAL_MEM_MEMORY_INFO_GENERATE_DAT_SYM 1
#define PERIPHERAL_MEM_MEMORY_INFO_GENERATE_HEX 1
#define PERIPHERAL_MEM_MEMORY_INFO_HAS_BYTE_LANE 0
#define PERIPHERAL_MEM_MEMORY_INFO_HEX_INSTALL_DIR QPF_DIR
#define PERIPHERAL_MEM_MEMORY_INFO_MEM_INIT_DATA_WIDTH 32
#define PERIPHERAL_MEM_MEMORY_INFO_MEM_INIT_FILENAME soc_system_peripheral_mem

/*
 * Macros for device 'intel_niosv_m_0', class 'intel_niosv_m'
 * The macros are prefixed with 'INTEL_NIOSV_M_0_'.
 * The prefix is the slave descriptor.
 */
#define INTEL_NIOSV_M_0_COMPONENT_TYPE intel_niosv_m
#define INTEL_NIOSV_M_0_COMPONENT_NAME intel_niosv_m_0
#define INTEL_NIOSV_M_0_BASE 0x10000
#define INTEL_NIOSV_M_0_SPAN 64
#define INTEL_NIOSV_M_0_END 0x1003f
#define INTEL_NIOSV_M_0_CPU_FREQ 25000000
#define INTEL_NIOSV_M_0_DATA_ADDR_WIDTH 32
#define INTEL_NIOSV_M_0_DCACHE_LINE_SIZE 0
#define INTEL_NIOSV_M_0_DCACHE_LINE_SIZE_LOG2 0
#define INTEL_NIOSV_M_0_DCACHE_SIZE 0
#define INTEL_NIOSV_M_0_ICACHE_LINE_SIZE 0
#define INTEL_NIOSV_M_0_ICACHE_LINE_SIZE_LOG2 0
#define INTEL_NIOSV_M_0_ICACHE_SIZE 0
#define INTEL_NIOSV_M_0_INST_ADDR_WIDTH 32
#define INTEL_NIOSV_M_0_MTIME_OFFSET 0x00010000
#define INTEL_NIOSV_M_0_NUM_GPR 32
#define INTEL_NIOSV_M_0_RESET_ADDR 0x0
#define INTEL_NIOSV_M_0_TICKS_PER_SEC no_quote(NIOSV_INTERNAL_TIMER_TICKS_PER_SECOND)
#define INTEL_NIOSV_M_0_TIMER_DEVICE_TYPE 2


#endif /* _ALTERA_INTEL_NIOSV_M_0_H_ */
